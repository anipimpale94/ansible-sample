---
  - name: Provision an EC2 Instance
    hosts: localhost
    connection: local
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars_files:
      - ec2_vars.yml

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:
      - name: Create a security group
        local_action: 
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: basic_firewall

      - name: Launch the new EC2 Instance
        local_action: ec2 
                      group={{ security_group }} 
                      instance_type={{ instance_type}} 
                      image={{ image }} 
                      wait=true 
                      region={{ region }} 
                      keypair={{ keypair }}
                      count={{count}}
        register: ec2

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile 
                      dest="./hosts" 
                      regexp={{ item.public_ip }} 
                      insertafter="[webserver]" 
                      line="{{ item.public_ip }} ansible_host={{ item.public_ip }} ansible_user=ec2-user {{hoststring}}"
        with_items: '{{ ec2.instances }}'

      - name: Add host in memory list
        add_host: 
          name: "{{ ec2.instances[0].public_ip }} ansible_host={{ ec2.instances[0].public_ip }} ansible_user=ec2-user {{hoststring}}"
          groups: "webserver"

      - name: debug output
        debug:
          msg: "Inventory is {{ inventory_hostname }}"

      - name: Display all variables/facts known for a host
        debug:
          var: hostvars[inventory_hostndame]
          verbosity: 4


      - name: Wait for SSH to come up
        local_action: wait_for 
                      host={{ item.public_ip }} 
                      port=22 
                      state=started
        with_items: '{{ ec2.instances }}'

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: '{{ ec2.instances }}'
        args:
          tags:
            Name: webserver

  # Install docker dependencies and deployment on EC2 instance
  - name: Install Docker in EC2
    hosts: webserver
    remote_user: ec2-user
    become: true
    gather_facts: false

    vars: 
      service_name: docker
      python_pip: python-pip

    tasks:       
      - name: Installing Docker
        yum: pkg={{item}} state=latest
        with_items:
        - docker
        - python-pip

      - name: Upgrading pip
        command: pip install --upgrade pip
      
      - name: Checking docker installed
        stat: path=/etc/init.d/{{service_name}}
        register: service_status
      
      - name: Installing docker-py
        pip: name=docker-py state=latest

      - name: Start Docker
        command: service docker start

      - name: Create Folder if not exist
        file:
          path: /home/app
          state: directory
          
      - name: Copying docker images
        copy: src=src dest=/home/app
      
      - name: Building local docker
        docker_image:
          repository: latest
          name: "akvedo/app"
          dockerfile : Dockerfile
          path: /home/app/src
          state: present

      - name: Running docker image
        docker_container:
          name: app
          image: akvedo/app
          restart: yes
          state: started
          privileged: true

